[{"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\index.js":"1","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\App.js":"2","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\serviceWorker.js":"3","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\app\\store.js":"4","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\AppWrapper\\AppWrapper.js":"5","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\axios.js":"6","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\localStorage.js":"7","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\ErrorBoundary\\ErrorBoundary.js":"8","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\Loader\\Loader.js":"9","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\LoginScreen\\Landing.js":"10","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\HomeScreen\\HomeScreen.js":"11","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\LoginScreen\\LoginScreen.js":"12","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\SearchPage\\SearchPage.js":"13","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Checkout\\Checkout.js":"14","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Employee\\Employee.js":"15","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Medicine\\Medicine.js":"16","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\features\\search\\searchSlice.js":"17","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\features\\login\\loginSlice.js":"18","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\features\\shop\\shopSlice.js":"19","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\Toast\\Toast.js":"20","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Medicine\\UpdateMedicineForm.js":"21","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Medicine\\AddMedicineForm.js":"22","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\Header\\Header.js":"23","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\EmptyState\\EmptyState.js":"24","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\common\\invoice.js":"25","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\TextField\\TextField.js":"26"},{"size":805,"mtime":1633772604710,"results":"27","hashOfConfig":"28"},{"size":3289,"mtime":1633772604686,"results":"29","hashOfConfig":"28"},{"size":5151,"mtime":1633772604726,"results":"30","hashOfConfig":"28"},{"size":370,"mtime":1633772604687,"results":"31","hashOfConfig":"28"},{"size":192,"mtime":1633772604694,"results":"32","hashOfConfig":"28"},{"size":157,"mtime":1633840814992,"results":"33","hashOfConfig":"28"},{"size":268,"mtime":1633772604710,"results":"34","hashOfConfig":"28"},{"size":1105,"mtime":1633772604699,"results":"35","hashOfConfig":"28"},{"size":310,"mtime":1633772604702,"results":"36","hashOfConfig":"28"},{"size":557,"mtime":1633772604717,"results":"37","hashOfConfig":"28"},{"size":1840,"mtime":1633800772548,"results":"38","hashOfConfig":"28"},{"size":3026,"mtime":1633772604720,"results":"39","hashOfConfig":"28"},{"size":28995,"mtime":1634096293650,"results":"40","hashOfConfig":"28"},{"size":9568,"mtime":1634096615599,"results":"41","hashOfConfig":"28"},{"size":5807,"mtime":1633772604715,"results":"42","hashOfConfig":"28"},{"size":967,"mtime":1633841352045,"results":"43","hashOfConfig":"28"},{"size":1267,"mtime":1633772820721,"results":"44","hashOfConfig":"28"},{"size":2122,"mtime":1633772604707,"results":"45","hashOfConfig":"28"},{"size":1848,"mtime":1633772604709,"results":"46","hashOfConfig":"28"},{"size":389,"mtime":1633772604706,"results":"47","hashOfConfig":"28"},{"size":6164,"mtime":1634096291150,"results":"48","hashOfConfig":"28"},{"size":7974,"mtime":1633841177846,"results":"49","hashOfConfig":"28"},{"size":6555,"mtime":1634096487816,"results":"50","hashOfConfig":"28"},{"size":523,"mtime":1634096035764,"results":"51","hashOfConfig":"28"},{"size":1512,"mtime":1633772604693,"results":"52","hashOfConfig":"28"},{"size":758,"mtime":1633772604704,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"13ok46o",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\index.js",[],["117","118"],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\App.js",["119","120","121","122","123"],"import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport LoginScreen from \"./screens/LoginScreen/LoginScreen\";\r\nimport HomeScreen from \"./screens/HomeScreen/HomeScreen\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  createTokenAsync,\r\n  log,\r\n  logout,\r\n  selectIsAdmin,\r\n  selectLoggedIn,\r\n  selectUser,\r\n} from \"./features/login/loginSlice\";\r\nimport Landing from \"./screens/LoginScreen/Landing\";\r\nimport Employee from \"./screens/Employee/Employee\";\r\n\r\nimport ErrorBoundry from \"./components/ErrorBoundary/ErrorBoundary\";\r\nimport { AUTH_TOKEN } from \"./localStorage\";\r\nimport Loader from \"./components/Loader/Loader\";\r\nimport axios from './axios'\r\nimport { useHistory } from \"react-router\";\r\nimport ls from 'local-storage'\r\nimport { currentShop } from \"./features/shop/shopSlice\";\r\nconst Checkout = React.lazy(() =>\r\n  import(/* webpackChunkName: 'checkout' */ \"./screens/Checkout/Checkout\")\r\n);\r\n\r\nconst SearchPage = React.lazy(() =>\r\n  import(/* webpackChunkName: 'checkout' */ \"./screens/SearchPage/SearchPage\")\r\n);\r\n\r\nconst Medicine = React.lazy(() =>\r\n  import(/* webpackChunkName: 'checkout' */ \"./screens/Medicine/Medicine\")\r\n);\r\n\r\n\r\n\r\nfunction App() {\r\n  const loggedIn = useSelector(selectLoggedIn);\r\n  const isAdmin = useSelector(selectIsAdmin);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  console.log(loggedIn);\r\n  const shops = useSelector((state) => state.shop.shops);\r\n  const checkTokenValidation = async () => {\r\n    try {\r\n        const response = await axios.post('/api-token-auth/',{},{\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Token ${ls.get('token')}`\r\n            },\r\n          })\r\n        dispatch(log({admin:response.data.isAdmin,employee:response.data.employeeId,company:response.data.companyId}))\r\n        if(!(response.data.isAdmin)){\r\n          dispatch(currentShop(response.data.companyId))\r\n        }\r\n        \r\n    } \r\n      catch (error) {\r\n        dispatch(logout())\r\n\r\n      }\r\n\r\n}\r\n  useEffect(() => {\r\n    const token = AUTH_TOKEN;\r\n    console.log(token);\r\n    if (token) {\r\n      checkTokenValidation()\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!loggedIn ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <>\r\n            <React.Suspense fallback={<Loader />}>\r\n              <ErrorBoundry>\r\n         \r\n                <div className=\"app-wrapper\">\r\n                  <Switch>\r\n                  \r\n                    <Route\r\n                      exact\r\n                      path=\"/\"\r\n                      component={shops.length === 0 ? Landing : HomeScreen}\r\n                    ></Route>\r\n                    <Route path=\"/employee\" component={Employee}></Route>\r\n                    <Route path=\"/search/:params?\" component={SearchPage} />\r\n                    <Route path=\"/checkout\" component={Checkout} />\r\n                    <Route path=\"/medicine\" component={Medicine} />\r\n                  </Switch>\r\n                </div>\r\n              </ErrorBoundry>\r\n            </React.Suspense>\r\n          </>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\serviceWorker.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\app\\store.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\AppWrapper\\AppWrapper.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\axios.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\localStorage.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\ErrorBoundary\\ErrorBoundary.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\Loader\\Loader.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\LoginScreen\\Landing.js",["124","125","126"],"import React, { useEffect } from 'react'\r\nimport { useDispatch,useSelector } from 'react-redux'\r\n\r\nimport logo from '../../assets/images/tenor.gif'\r\nimport { fetchShops } from '../../features/shop/shopSlice'\r\nimport './Landing.css'\r\nfunction Landing() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchShops())\r\n        \r\n    }, [])\r\n    \r\n    return (\r\n        \r\n        <div className=\"container__landing\">\r\n                <img src={logo} className=\"logo__image\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Landing\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\HomeScreen\\HomeScreen.js",["127"],"import React,{useState} from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { logout, selectIsAdmin } from '../../features/login/loginSlice';\r\nimport { currentShop } from '../../features/shop/shopSlice';\r\nimport './Home.css'\r\nimport Header from \"../../components/Header/Header\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useHistory } from 'react-router';\r\nfunction HomeScreen() {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const shops = useSelector(state => state.shop.shops)\r\n    const isAdmin = useSelector(selectIsAdmin)\r\n    const [search, setSearch] = useState(true)\r\n    return (\r\n\r\n        <div className=\"home__container\">\r\n            {isAdmin && search ? shops?.map(item => (\r\n                <Card style={{margin :\"10px\"}}>\r\n                  <Card.Body>\r\n                    <Card.Title>{item.name}</Card.Title>\r\n                    <Card.Text>\r\n                        {item.description}\r\n                    </Card.Text>\r\n                    <div style={{display:\"flex\" ,flexDirection:\"column\"}}>\r\n                    <Button variant=\"primary\" onClick={() => {\r\n                    dispatch(currentShop(item.id))\r\n                    history.push('employee/')\r\n                    }} style={{ width: '20rem',marginTop:\"0.1rem\"}}>Add Employee</Button>\r\n                    <Button variant=\"primary\" onClick={() => {\r\n                    dispatch(currentShop(item.id))\r\n                    setSearch(false)\r\n                    }} style={{ width: '20rem',marginTop:\"0.4rem\"}}>Create Order</Button>\r\n                    </div>\r\n                </Card.Body>\r\n              </Card>\r\n\r\n            )) : <Header/>}\r\n\r\n             \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\LoginScreen\\LoginScreen.js",["128"],"import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"../../axios\";\r\nimport \"./Login.css\";\r\nimport { log } from \"../../features/login/loginSlice\";\r\nimport { useHistory } from \"react-router\";\r\nimport { setAuthToken } from \"../../localStorage\";\r\nimport { toast } from \"../../components/Toast/Toast\";\r\nimport { currentShop } from \"../../features/shop/shopSlice\";\r\n\r\nfunction LoginScreen() {\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const handleSubmit = async () => {\r\n    if (name.trim().length > 0 && password.trim().length > 0) {\r\n      try {\r\n        console.log(name, typeof(password));\r\n        const response = await axios.post(\r\n          \"/api-token-auth/\",\r\n          {},\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            auth: {\r\n              username: name,\r\n              password: password,\r\n            },\r\n          }\r\n        );\r\n        dispatch(log({admin:response.data.isAdmin,employee:response.data.employeeId,company:response.data.companyId}));\r\n        if(!(response.data.isAdmin)){\r\n          dispatch(currentShop(response.data.companyId))\r\n        }\r\n        setAuthToken(\"token\", response.data.token);\r\n        setAuthToken(\"isAdmin\", response.data.isAdmin ? \"true\" : \"false\");\r\n        history.replace(\"/\");\r\n      } catch (error) {\r\n        console.log(error.message);\r\n        toast.error(\"Authentication denied\");\r\n      }\r\n    } else {\r\n      toast.error(\"no Data\");\r\n    }}\r\n    return (\r\n        <div className=\"main\">\r\n        <div className=\"container__login\">\r\n            <div className=\"logo\">Login Form</div>\r\n            <div className=\"imgcontainer\">\r\n            <img src=\"https://www.w3schools.com/howto/img_avatar2.png\" alt=\"Avatar\" className=\"avatar\"/>\r\n            </div>\r\n            <div className=\"login-item\">\r\n            <div className=\"form form-login\">\r\n                <div className=\"form-field\">\r\n                <label className=\"user\" for=\"login-username\"><span className=\"hidden\">Username</span></label>\r\n                <input id=\"login-username\" type=\"text\" className=\"form-input\" value={name} onChange={e => setName(e.target.value)} placeholder=\"Username\" required/>\r\n                </div>\r\n\r\n                <div className=\"form-field\">\r\n                <label className=\"lock\" for=\"login-password\"><span className=\"hidden\">Password</span></label>\r\n                <input id=\"login-password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} className=\"form-input\" placeholder=\"Password\" required/>\r\n                </div>\r\n\r\n                <div className=\"form-field\">\r\n                <input onClick={handleSubmit} type=\"submit\" value=\"Log in\"/>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\SearchPage\\SearchPage.js",["129","130","131","132"],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Form,\r\n  Dropdown,\r\n  Card,\r\n  Button,\r\n  Modal,\r\n} from \"react-bootstrap\";\r\nimport { FunnelFill } from \"react-bootstrap-icons\";\r\nimport \"./SearchPage.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport EmptyState from \"../../components/EmptyState/EmptyState\";\r\nimport { getSearchedData } from \"../../features/search/searchSlice\";\r\nimport ls from \"local-storage\";\r\nimport Header from \"../../components/Header/Header\";\r\n\r\nconst SORT_BY_MENUS = [\r\n  { label: \"Relevance\", value: \"relevance\" },\r\n  { label: \"Price: Low to High\", value: \"lowToHigh\" },\r\n  { label: \"Price: High to Low\", value: \"highToLow\" },\r\n];\r\n\r\nconst BRANDS_FILTER = [\r\n  { label: \"StayHappi\", value: \"StayHappi\" },\r\n  { label: \"Dolo\", value: \"Dolo\" },\r\n  { label: \"Crocin\", value: \"Crocin\" },\r\n  { label: \"Alkem\", value: \"Alkem\" },\r\n  { label: \"Metacin\", value: \"Metacin\" },\r\n];\r\n\r\nconst PRODUCT_FORM = [\r\n  { label: \"Tablet\", value: \"Tablet\" },\r\n  { label: \"Syrup\", value: \"Syrup\" },\r\n  { label: \"Drop\", value: \"Drop\" },\r\n  { label: \"Injection\", value: \"Injection\" },\r\n  { label: \"Capsule\", value: \"Capsule\" },\r\n];\r\n\r\nconst PRESCRIPTION_REQUIRED = [\r\n  { label: \"Required\", value: \"true\" },\r\n  { label: \"Not Required\", value: \"false\" },\r\n];\r\n\r\nconst AGE = [\r\n  { label: \"All\", value: \"All\" },\r\n  { label: \"Child\", value: \"Child\" },\r\n];\r\n\r\nconst SearchPage = ({ location }) => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const params = new URLSearchParams(location.search);\r\n  const searchedQuery = params.get(\"searchQuery\");\r\n  const [show, setShow] = useState(false);\r\n  const [sortBy, setSortBy] = useState(\"Relevance\");\r\n  const [currentAddToCartIndex, setCurrentAddToCartIndex] = useState(null);\r\n  const [filters, setFilters] = useState({\r\n    medicine_brand: [],\r\n    product_form: [],\r\n    presecription_required: [],\r\n    age: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(location.search);\r\n\r\n    if (params.get(\"asc\")) {\r\n      if (params.get(\"asc\") === \"true\") {\r\n        setSortBy(\"Price: Low to High\");\r\n      } else {\r\n        setSortBy(\"Price: High to Low\");\r\n      }\r\n    }\r\n\r\n    const paramsToObject = Object.fromEntries(params.entries());\r\n\r\n    const copyFilters = { ...filters };\r\n\r\n    copyFilters.medicine_brand =\r\n      paramsToObject && paramsToObject.medicine_brand\r\n        ? paramsToObject.medicine_brand.split(\",\")\r\n        : [];\r\n    copyFilters.product_form =\r\n      paramsToObject && paramsToObject.product_form\r\n        ? paramsToObject.product_form.split(\",\")\r\n        : [];\r\n    copyFilters.presecription_required =\r\n      paramsToObject && paramsToObject.presecription_required\r\n        ? paramsToObject.presecription_required.split(\",\")\r\n        : [];\r\n    copyFilters.age =\r\n      paramsToObject && paramsToObject.age ? paramsToObject.age.split(\",\") : [];\r\n\r\n    setFilters(copyFilters);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(location.search);\r\n\r\n    if (sortBy !== \"Relevance\") {\r\n      if (params.get(\"asc\")) {\r\n        params.delete(\"asc\");\r\n      }\r\n      params.append(\"asc\", sortBy === \"Price: Low to High\" ? \"true\" : \"false\");\r\n      dispatch(getSearchedData(params));\r\n      history.push(`/search?${params}`);\r\n    } else {\r\n      if (params.get(\"asc\")) {\r\n        params.delete(\"asc\");\r\n      }\r\n      dispatch(getSearchedData(params));\r\n      history.push(`/search?${params}`);\r\n    }\r\n  }, [sortBy]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      filters.medicine_brand.length > 0 ||\r\n      filters.product_form.length > 0 ||\r\n      filters.presecription_required > 0 ||\r\n      filters.age.length > 0\r\n    ) {\r\n      const params = new URLSearchParams(location.search);\r\n      let updatedFilters = { ...filters };\r\n\r\n      updatedFilters.medicine_brand = updatedFilters.medicine_brand.toString();\r\n      updatedFilters.product_form = updatedFilters.product_form.toString();\r\n      updatedFilters.presecription_required =\r\n        updatedFilters.presecription_required.toString();\r\n      updatedFilters.age = updatedFilters.age.toString();\r\n\r\n      Object.keys(updatedFilters).forEach((key) => {\r\n        if (updatedFilters[key]) {\r\n          if (params.get(key)) {\r\n            params.delete(key);\r\n          }\r\n          params.append(key, updatedFilters[key]);\r\n        }\r\n      });\r\n\r\n      dispatch(getSearchedData(params));\r\n      history.push(`/search?${params}`);\r\n    }\r\n  }, [filters]);\r\n\r\n  const clearFilter = () => {\r\n    const params = new URLSearchParams(location.search);\r\n\r\n    params.delete(\"medicine_brand\");\r\n    params.delete(\"product_form\");\r\n    params.delete(\"presecription_required\");\r\n    params.delete(\"age\");\r\n\r\n    dispatch(getSearchedData(params));\r\n    history.push(`/search?${params}`);\r\n    setFilters({\r\n      medicine_brand: [],\r\n      product_form: [],\r\n      presecription_required: [],\r\n      age: [],\r\n    });\r\n  };\r\n\r\n  const checkDuplicate = (currentItem, oldItems) => {\r\n    if (oldItems.length == 0) {\r\n      currentItem.count = 1;\r\n      oldItems.push(currentItem);\r\n      return oldItems;\r\n    }\r\n    let isFind = false;\r\n    let findIndex;\r\n    for (let itemIndex = 0; itemIndex < oldItems.length; itemIndex++) {\r\n      if (oldItems[itemIndex].id === currentItem.id) {\r\n        findIndex = itemIndex;\r\n        isFind = true;\r\n      }\r\n    }\r\n    if (isFind) {\r\n      oldItems[findIndex].count = oldItems[findIndex].count + 1;\r\n      return oldItems;\r\n    }\r\n    currentItem.count = 1;\r\n    oldItems.push(currentItem);\r\n    return oldItems;\r\n  };\r\n\r\n  const handleAddToCart = (item, index) => {\r\n    let currentItem = { ...item };\r\n    let oldItems = JSON.parse(ls.get(\"cartData\")) || [];\r\n    let updateOld = checkDuplicate(currentItem, oldItems);\r\n\r\n    ls.set(\"cartData\", JSON.stringify(updateOld));\r\n\r\n    //////\r\n    setCurrentAddToCartIndex(index);\r\n    setTimeout(() => {\r\n      setCurrentAddToCartIndex(null);\r\n    }, 1000);\r\n  };\r\n\r\n  let filteredListingData = useSelector((state) => state.search);\r\n\r\n  if (filteredListingData.status === \"failed\") {\r\n    return <>Error</>;\r\n  }\r\n\r\n  if (\r\n    filteredListingData.status === \"success\" ||\r\n    filteredListingData.status === \"loading\"\r\n  ) {\r\n    return (\r\n      <>\r\n      <Header/>\r\n        <div className=\"search-page-wrapper\">\r\n          <div className=\"search-page--left-panel\">\r\n            <div className=\"m-b-12 clear-filter-wrapper\">\r\n              <h4>Filters</h4>\r\n              <span className=\"clear-filter\" onClick={() => clearFilter()}>\r\n                Clear Filters\r\n              </span>\r\n            </div>\r\n            <Accordion flush className=\"m-b-12\">\r\n              <Accordion.Item eventKey=\"1\">\r\n                <Accordion.Header>Brands</Accordion.Header>\r\n                <Accordion.Body className=\"accordion-body\">\r\n                  {BRANDS_FILTER.map((item) => (\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      name={item.value}\r\n                      checked={\r\n                        filters.medicine_brand.indexOf(item.value) !== -1\r\n                      }\r\n                      onChange={(e) => {\r\n                        if (e.target.checked) {\r\n                          let brandNames = filters.medicine_brand;\r\n                          brandNames.push(e.target.name);\r\n                          setFilters({\r\n                            ...filters,\r\n                            medicine_brand: brandNames,\r\n                          });\r\n                        } else {\r\n                          if (\r\n                            filters.medicine_brand.indexOf(e.target.name) !== -1\r\n                          ) {\r\n                            let brandNames = filters.medicine_brand;\r\n                            brandNames.splice(\r\n                              filters.medicine_brand.indexOf(e.target.name),\r\n                              1\r\n                            );\r\n\r\n                            setFilters({\r\n                              ...filters,\r\n                              medicine_brand: brandNames,\r\n                            });\r\n                          }\r\n                        }\r\n                      }}\r\n                      key={item.value}\r\n                      label={item.label}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    />\r\n                  ))}\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>\r\n\r\n            <Accordion flush className=\"m-b-12\">\r\n              <Accordion.Item eventKey=\"1\">\r\n                <Accordion.Header>Product Form</Accordion.Header>\r\n                <Accordion.Body className=\"accordion-body\">\r\n                  {PRODUCT_FORM.map((item) => (\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      name={item.value}\r\n                      checked={filters.product_form.indexOf(item.value) !== -1}\r\n                      onChange={(e) => {\r\n                        if (e.target.checked) {\r\n                          let brandNames = filters.product_form;\r\n                          brandNames.push(e.target.name);\r\n                          setFilters({\r\n                            ...filters,\r\n                            product_form: brandNames,\r\n                          });\r\n                        } else {\r\n                          if (\r\n                            filters.product_form.indexOf(e.target.name) !== -1\r\n                          ) {\r\n                            let brandNames = filters.product_form;\r\n                            brandNames.splice(\r\n                              filters.product_form.indexOf(e.target.name),\r\n                              1\r\n                            );\r\n\r\n                            setFilters({\r\n                              ...filters,\r\n                              product_form: brandNames,\r\n                            });\r\n                          }\r\n                        }\r\n                      }}\r\n                      key={item.value}\r\n                      label={item.label}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    />\r\n                  ))}\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>\r\n\r\n            <Accordion flush className=\"m-b-12\">\r\n              <Accordion.Item eventKey=\"1\">\r\n                <Accordion.Header>Prescription Required</Accordion.Header>\r\n                <Accordion.Body className=\"accordion-body\">\r\n                  {PRESCRIPTION_REQUIRED.map((item) => (\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      name={item.value}\r\n                      checked={\r\n                        filters.presecription_required.indexOf(item.value) !==\r\n                        -1\r\n                      }\r\n                      onChange={(e) => {\r\n                        if (e.target.checked) {\r\n                          let brandNames = filters.presecription_required;\r\n                          brandNames.push(e.target.name);\r\n                          setFilters({\r\n                            ...filters,\r\n                            presecription_required: brandNames,\r\n                          });\r\n                        } else {\r\n                          if (\r\n                            filters.presecription_required.indexOf(\r\n                              e.target.name\r\n                            ) !== -1\r\n                          ) {\r\n                            let brandNames = filters.presecription_required;\r\n                            brandNames.splice(\r\n                              filters.presecription_required.indexOf(\r\n                                e.target.name\r\n                              ),\r\n                              1\r\n                            );\r\n\r\n                            setFilters({\r\n                              ...filters,\r\n                              presecription_required: brandNames,\r\n                            });\r\n                          }\r\n                        }\r\n                      }}\r\n                      key={item.value}\r\n                      label={item.label}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    />\r\n                  ))}\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>\r\n\r\n            {/* <Accordion flush className=\"m-b-12\">\r\n                <Accordion.Item eventKey=\"1\">\r\n                  <Accordion.Header>Usage</Accordion.Header>\r\n                  <Accordion.Body className=\"accordion-body\">\r\n                    <Form.Check type=\"checkbox\" label=\"Fever\" />\r\n                    <Form.Check type=\"checkbox\" label=\"Cough & Cold\" />\r\n                  </Accordion.Body>\r\n                </Accordion.Item>\r\n              </Accordion> */}\r\n\r\n            <Accordion flush className=\"m-b-12\">\r\n              <Accordion.Item eventKey=\"1\">\r\n                <Accordion.Header>Age</Accordion.Header>\r\n                <Accordion.Body className=\"accordion-body\">\r\n                  {AGE.map((item) => (\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      name={item.value}\r\n                      checked={filters.age.indexOf(item.value) !== -1}\r\n                      onChange={(e) => {\r\n                        if (e.target.checked) {\r\n                          let brandNames = filters.age;\r\n                          brandNames.push(e.target.name);\r\n                          setFilters({\r\n                            ...filters,\r\n                            age: brandNames,\r\n                          });\r\n                        } else {\r\n                          if (filters.age.indexOf(e.target.name) !== -1) {\r\n                            let brandNames = filters.age;\r\n                            brandNames.splice(\r\n                              filters.age.indexOf(e.target.name),\r\n                              1\r\n                            );\r\n\r\n                            setFilters({\r\n                              ...filters,\r\n                              age: brandNames,\r\n                            });\r\n                          }\r\n                        }\r\n                      }}\r\n                      key={item.value}\r\n                      label={item.label}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    />\r\n                  ))}\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>\r\n          </div>\r\n\r\n          <div className=\"search-page--right-panel\">\r\n            <div className=\"search-page--header\">\r\n              <div className=\"flex-column\">\r\n                <span className=\"font-size-14\">Search Results</span>\r\n                <span className=\"font-size-26\">\"{searchedQuery}\"</span>\r\n              </div>\r\n              <div className=\"flex-items-center\">\r\n                <span>Sort By</span>\r\n                <span>\r\n                  <Dropdown\r\n                    className=\"dropdown-wrapper\"\r\n                    onSelect={(value) => {\r\n                      setSortBy(value);\r\n                    }}\r\n                  >\r\n                    <Dropdown.Toggle variant=\"white\" id=\"dropdown-basic\">\r\n                      {sortBy}\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                      {SORT_BY_MENUS.map((item) => (\r\n                        <Dropdown.Item eventKey={item.label} key={item.value}>\r\n                          {item.label}\r\n                        </Dropdown.Item>\r\n                      ))}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"margin-top-12\">\r\n              {filteredListingData.status === \"loading\" ? (\r\n                <div>\r\n                  <Loader inline={true} />\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  {filteredListingData &&\r\n                  filteredListingData.searchedData &&\r\n                  filteredListingData.searchedData.length ? (\r\n                    <>\r\n                      {filteredListingData.searchedData.map((item, i) => (\r\n                        <Card className=\"m-b-12\" key={item.id}>\r\n                          <Card.Body>\r\n                            <div className=\"flex-column\">\r\n                              <div className=\"flex-content-sb\">\r\n                                <div className=\"flex-column\">\r\n                                  <span className=\"font-weight-700\">\r\n                                    {item?.name}\r\n                                  </span>\r\n                                  {/* <span className=\"tablets-strip\">\r\n                                    strip of 15 tablets\r\n                                  </span> */}\r\n                                </div>\r\n\r\n                                <div className=\"flex-column\">\r\n                                  <span>₹{item?.sell_price || 0}</span>\r\n                                </div>\r\n                              </div>\r\n\r\n                              <div className=\"search-page--counter-wrapper\">\r\n                                <div className=\"search-page-wrapper\"></div>\r\n                                <div\r\n                                  id=\"addToCartWrapper\"\r\n                                  style={{ display: \"flex\" }}\r\n                                >\r\n                                  {currentAddToCartIndex === i && (\r\n                                    <div className=\"search-page--add-cart\">\r\n                                      &#10003;\r\n                                    </div>\r\n                                  )}\r\n                                  &nbsp;\r\n                                  {currentAddToCartIndex !== i ? (\r\n                                    <div\r\n                                      className=\"search-page--add-cart\"\r\n                                      onClick={() => {\r\n                                        handleAddToCart(item, i);\r\n                                      }}\r\n                                    >\r\n                                      ADD TO CART\r\n                                    </div>\r\n                                  ) : (\r\n                                    <>\r\n                                      {currentAddToCartIndex === i && (\r\n                                        <div\r\n                                          id=\"addToCart\"\r\n                                          className=\"search-page--add-cart\"\r\n                                        >\r\n                                          ADDED\r\n                                        </div>\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </Card.Body>\r\n                        </Card>\r\n                      ))}\r\n                    </>\r\n                  ) : (\r\n                    <EmptyState />\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"filter-button\">\r\n            <Button\r\n              onClick={() => setShow(true)}\r\n              className=\"funner-filter--wrapper\"\r\n            >\r\n              <FunnelFill\r\n                size={30}\r\n                color=\"#28b8b0\"\r\n                className=\"mr-20 cursor-pointer\"\r\n              />\r\n            </Button>\r\n          </div>\r\n\r\n          <Modal show={show} fullscreen={true} onHide={() => setShow(false)}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Apply Filters</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div>\r\n                <Accordion flush className=\"m-b-12\">\r\n                  <Accordion.Item eventKey=\"1\">\r\n                    <Accordion.Header>Brands</Accordion.Header>\r\n                    <Accordion.Body className=\"accordion-body\">\r\n                      {BRANDS_FILTER.map((item) => (\r\n                        <Form.Check\r\n                          type=\"checkbox\"\r\n                          name={item.value}\r\n                          checked={\r\n                            filters.medicine_brand.indexOf(item.value) !== -1\r\n                          }\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              let brandNames = filters.medicine_brand;\r\n                              brandNames.push(e.target.name);\r\n                              setFilters({\r\n                                ...filters,\r\n                                medicine_brand: brandNames,\r\n                              });\r\n                            } else {\r\n                              if (\r\n                                filters.medicine_brand.indexOf(\r\n                                  e.target.name\r\n                                ) !== -1\r\n                              ) {\r\n                                let brandNames = filters.medicine_brand;\r\n                                brandNames.splice(\r\n                                  filters.medicine_brand.indexOf(e.target.name),\r\n                                  1\r\n                                );\r\n\r\n                                setFilters({\r\n                                  ...filters,\r\n                                  medicine_brand: brandNames,\r\n                                });\r\n                              }\r\n                            }\r\n                          }}\r\n                          key={item.value}\r\n                          label={item.label}\r\n                          style={{ cursor: \"pointer\" }}\r\n                        />\r\n                      ))}\r\n                    </Accordion.Body>\r\n                  </Accordion.Item>\r\n                </Accordion>\r\n\r\n                <Accordion flush className=\"m-b-12\">\r\n                  <Accordion.Item eventKey=\"1\">\r\n                    <Accordion.Header>Product Form</Accordion.Header>\r\n                    <Accordion.Body className=\"accordion-body\">\r\n                      {PRODUCT_FORM.map((item) => (\r\n                        <Form.Check\r\n                          type=\"checkbox\"\r\n                          name={item.value}\r\n                          checked={\r\n                            filters.product_form.indexOf(item.value) !== -1\r\n                          }\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              let brandNames = filters.product_form;\r\n                              brandNames.push(e.target.name);\r\n                              setFilters({\r\n                                ...filters,\r\n                                product_form: brandNames,\r\n                              });\r\n                            } else {\r\n                              if (\r\n                                filters.product_form.indexOf(e.target.name) !==\r\n                                -1\r\n                              ) {\r\n                                let brandNames = filters.product_form;\r\n                                brandNames.splice(\r\n                                  filters.product_form.indexOf(e.target.name),\r\n                                  1\r\n                                );\r\n\r\n                                setFilters({\r\n                                  ...filters,\r\n                                  product_form: brandNames,\r\n                                });\r\n                              }\r\n                            }\r\n                          }}\r\n                          key={item.value}\r\n                          label={item.label}\r\n                          style={{ cursor: \"pointer\" }}\r\n                        />\r\n                      ))}\r\n                    </Accordion.Body>\r\n                  </Accordion.Item>\r\n                </Accordion>\r\n\r\n                <Accordion flush className=\"m-b-12\">\r\n                  <Accordion.Item eventKey=\"1\">\r\n                    <Accordion.Header>Prescription Required</Accordion.Header>\r\n                    <Accordion.Body className=\"accordion-body\">\r\n                      {PRESCRIPTION_REQUIRED.map((item) => (\r\n                        <Form.Check\r\n                          type=\"checkbox\"\r\n                          name={item.value}\r\n                          checked={\r\n                            filters.presecription_required.indexOf(\r\n                              item.value\r\n                            ) !== -1\r\n                          }\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              let brandNames = filters.presecription_required;\r\n                              brandNames.push(e.target.name);\r\n                              setFilters({\r\n                                ...filters,\r\n                                presecription_required: brandNames,\r\n                              });\r\n                            } else {\r\n                              if (\r\n                                filters.presecription_required.indexOf(\r\n                                  e.target.name\r\n                                ) !== -1\r\n                              ) {\r\n                                let brandNames = filters.presecription_required;\r\n                                brandNames.splice(\r\n                                  filters.presecription_required.indexOf(\r\n                                    e.target.name\r\n                                  ),\r\n                                  1\r\n                                );\r\n\r\n                                setFilters({\r\n                                  ...filters,\r\n                                  presecription_required: brandNames,\r\n                                });\r\n                              }\r\n                            }\r\n                          }}\r\n                          key={item.value}\r\n                          label={item.label}\r\n                          style={{ cursor: \"pointer\" }}\r\n                        />\r\n                      ))}\r\n                    </Accordion.Body>\r\n                  </Accordion.Item>\r\n                </Accordion>\r\n\r\n                <Accordion flush className=\"m-b-12\">\r\n                  <Accordion.Item eventKey=\"1\">\r\n                    <Accordion.Header>Age</Accordion.Header>\r\n                    <Accordion.Body className=\"accordion-body\">\r\n                      {AGE.map((item) => (\r\n                        <Form.Check\r\n                          type=\"checkbox\"\r\n                          name={item.value}\r\n                          checked={filters.age.indexOf(item.value) !== -1}\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              let brandNames = filters.age;\r\n                              brandNames.push(e.target.name);\r\n                              setFilters({\r\n                                ...filters,\r\n                                age: brandNames,\r\n                              });\r\n                            } else {\r\n                              if (filters.age.indexOf(e.target.name) !== -1) {\r\n                                let brandNames = filters.age;\r\n                                brandNames.splice(\r\n                                  filters.age.indexOf(e.target.name),\r\n                                  1\r\n                                );\r\n\r\n                                setFilters({\r\n                                  ...filters,\r\n                                  age: brandNames,\r\n                                });\r\n                              }\r\n                            }\r\n                          }}\r\n                          key={item.value}\r\n                          label={item.label}\r\n                          style={{ cursor: \"pointer\" }}\r\n                        />\r\n                      ))}\r\n                    </Accordion.Body>\r\n                  </Accordion.Item>\r\n                </Accordion>\r\n\r\n                <div className=\"filter-apply-button\">\r\n                  <div className=\"d-grid gap-2\">\r\n                    <Button\r\n                      size=\"lg\"\r\n                      className=\"apply-button--wrapper\"\r\n                      onClick={() => setShow(false)}\r\n                    >\r\n                      Apply\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SearchPage;\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Checkout\\Checkout.js",["133","134","135"],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Employee\\Employee.js",["136","137","138","139"],"import React,{useEffect} from 'react'\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form } from \"formik\";\r\nimport './Employee.css'\r\nimport axios from '../../axios'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport ls from 'local-storage'\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport TextField from \"../../components/TextField/TextField\";\r\nimport { toast } from \"../../components/Toast/Toast\";\r\nimport { instanceShop } from '../../features/shop/shopSlice';\r\nimport { selectIsAdmin } from '../../features/login/loginSlice';\r\nfunction Employee() {\r\n    const history = useHistory()\r\n    const shop_id = useSelector(instanceShop)\r\n    const isAdmin = useSelector(selectIsAdmin)\r\n    useEffect(() => {\r\n      if(!isAdmin){\r\n        history.replace('/')\r\n      }\r\n    }, [])\r\n    const handleSubmit = async (values) => {\r\n\r\n        console.log(values)\r\n            try {\r\n                const response = await axios.post('/api/employee/',values, {headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Token ${ls.get('token')}` \r\n                    \r\n                }})\r\n                console.log(response)\r\n                history.replace('/')\r\n            } \r\n              catch (error) {\r\n                  console.log(error)\r\n                  toast.error(\"Authentication denied\")\r\n\r\n              }\r\n    }\r\n    const phoneRegExp = \"/^[6-9]\\d{9}$/\"\r\n    const validate = Yup.object({\r\n        email: Yup.string().required(\"Required*\").email(),\r\n        password: Yup.string().required(\"Required*\"),\r\n        first_name: Yup.string().required(\"Required*\"),\r\n        username: Yup.string().required(\"Required*\"),\r\n        date_joined: Yup.string().required(\"Required*\"),\r\n        phone: Yup.string().required(\"Required*\").min(10, \"phone number not valid\").max(10, \"phone number not valid\"),\r\n      });\r\n    const check_username_exists = async (username) => {\r\n        console.log(username)\r\n        if(username.trim()){\r\n            try {\r\n                const response = await axios.post('/username-exists/',{username:username}, {headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Token ${ls.get('token')}`  \r\n                }})\r\n                if(response.data.exists){\r\n                  toast.error(\"Username exists\")\r\n                }\r\n            } \r\n              catch (error) {\r\n                  console.log(\"here\")\r\n                  return false\r\n    \r\n              }\r\n\r\n        }\r\n        \r\n    }\r\n    return (\r\n\r\n            \r\n            <Formik\r\n            validationSchema={validate}\r\n            initialValues={{ email: '', password: '' ,first_name:'',username:'',date_joined:'',phone:'',company:shop_id}}\r\n            onSubmit={handleSubmit}\r\n            >\r\n            {(formik) => (\r\n                \r\n                <div>\r\n                  <h1>Register Employee</h1>\r\n                <Form>\r\n                  <Container>\r\n                    <Row>\r\n                      <Col md={12}>\r\n                        <TextField\r\n                          name=\"username\"\r\n                          type=\"text\"\r\n                          placeholder=\"username\"\r\n                          onBlur={() => check_username_exists(formik.values.username)}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col md={12}>\r\n                        <TextField\r\n                          name=\"password\"\r\n                          type=\"password\"\r\n                          placeholder=\"password\"\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col md={12}>\r\n                        <TextField\r\n                          name=\"first_name\"\r\n                          type=\"text\"\r\n                          placeholder=\"name\"\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col md={12}>\r\n                        <TextField\r\n                          name=\"email\"\r\n                          type=\"text\"\r\n                          placeholder=\"Email\"\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n      \r\n                    <Row>\r\n                      <Col md={12}>\r\n                        <TextField\r\n                          name=\"date_joined\"\r\n                          type=\"date\"\r\n                          placeholder=\"Date\"\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n      \r\n                    <Row>\r\n                      <Col md={12}>\r\n                        <TextField\r\n                          name=\"phone\"\r\n                          type=\"number\"\r\n                          placeholder=\"Mobile no\"\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n      \r\n                   \r\n      \r\n                    <Row>\r\n                      <div className=\"d-grid gap-2\">\r\n                        <Button\r\n                          type=\"submit\"\r\n                          style={{\r\n                            border: \"none\",\r\n                            backgroundColor: \"#28b8b0\",\r\n                          }}\r\n                          disabled={!(formik.isValid && formik.dirty)}\r\n                        >\r\n                          Submit\r\n                        </Button>\r\n                      </div>\r\n                    </Row>\r\n                  </Container>\r\n                </Form>\r\n              </div>\r\n            )}\r\n            </Formik>\r\n            \r\n  );\r\n}\r\n\r\nexport default Employee;\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Medicine\\Medicine.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\features\\search\\searchSlice.js",["140"],"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"../../axios\";\r\nimport { AUTH_TOKEN } from \"../../localStorage\";\r\nimport ls from 'local-storage'\r\nconst initialState = {\r\n  status: \"idle\",\r\n  error: \"\",\r\n  searchedData: [],\r\n};\r\n\r\nexport const getSearchedData = createAsyncThunk(\r\n  \"searchSlice/getSearchedData\",\r\n  async (searchParams, thunkAPI) => {\r\n    let config = {\r\n      headers: {\r\n        Authorization: `Token ${ls.get('token')}`,\r\n      },\r\n    };\r\n\r\n    try {\r\n\r\n      const response = await axios.get(`/search?${searchParams}`, config);\r\n      return response.data;\r\n    } catch (error) {\r\n      return error.message;\r\n      // return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst searchSlice = createSlice({\r\n  name: \"searchSlice\",\r\n  initialState: initialState,\r\n  extraReducers: {\r\n    [getSearchedData.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getSearchedData.fulfilled]: (state, { payload }) => {\r\n      state.searchedData = payload;\r\n      state.status = \"success\";\r\n    },\r\n    [getSearchedData.rejected]: (state, { payload }) => {\r\n      state.error = payload;\r\n      state.status = \"failed\";\r\n    },\r\n  },\r\n});\r\n\r\nexport default searchSlice.reducer;\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\features\\login\\loginSlice.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\features\\shop\\shopSlice.js",["141"],"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"../../axios\";\r\nimport { AUTH_TOKEN, removeToken } from \"../../localStorage\";\r\nimport { toast } from \"../../components/Toast/Toast\";\r\nimport ls from 'local-storage'\r\nconst initialState = {\r\n  shops: [],\r\n  status: 'idle',\r\n  instanceShop:null,\r\n  error:''\r\n};\r\n\r\nexport const fetchShops = createAsyncThunk(\r\n  \"shop/fetchShops\",\r\n  async (thunkAPI) => {\r\n    try {\r\n      console.log(AUTH_TOKEN)\r\n      const response = await axios.get(\"/api/company/\", {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Token ${ls.get('token')}`,\r\n        },\r\n      });\r\n      console.log(response.data);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n      return thunkAPI.rejectWithValue(error.message);\r\n    }}\r\n  );\r\n\r\nexport const shopSlice = createSlice({\r\n    name: 'shop',\r\n    initialState,\r\n    reducers:{\r\n      currentShop:(state,action) => {\r\n        console.log(action.payload)\r\n        state.instanceShop = action.payload\r\n      }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n          .addCase(fetchShops.pending, (state) => {\r\n            state.status = 'loading';\r\n          })\r\n          .addCase(fetchShops.fulfilled, (state, action) => {\r\n            state.status = 'idle';\r\n            console.log(action.payload)\r\n            state.shops = action.payload;\r\n            state.error = ''\r\n            \r\n          })\r\n          .addCase(fetchShops.rejected, (state, action) => {\r\n            state.status = 'error';\r\n            state.error = action.payload;\r\n          })\r\n      },\r\n  });\r\n  \r\n  export const { currentShop } = shopSlice.actions;\r\n  export const instanceShop = (state) => state.shop.instanceShop;\r\n  export default shopSlice.reducer;","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\Toast\\Toast.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Medicine\\UpdateMedicineForm.js",["142"],"import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Form as BootstrapForm,\r\n} from \"react-bootstrap\";\r\nimport TextField from \"../../components/TextField/TextField\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Search } from \"react-bootstrap-icons\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport ls from 'local-storage'\r\nimport axios from \"axios\";\r\nimport { toast } from \"../../components/Toast/Toast\";\r\n\r\nconst UpdateMedicineForm = () => {\r\n  const [searchedQuery, setSearchedQuery] = useState(\"\");\r\n  const [searchSelectorData, setSearchSelectorData] = useState(\"\");\r\n  const [med, setMed] = useState('')\r\n  const [medId, setMedId] = useState('')\r\n\r\n  const validate = Yup.object({\r\n    // name: Yup.string().required(\"Required*\"),\r\n    in_stock_total: Yup.number().required(\"Required*\").positive().integer(),\r\n    free_strip: Yup.number().required(\"Required*\").positive().integer()\r\n  });\r\n\r\n  const searchMedicine = () => {\r\n    let config = {\r\n      headers: {\r\n        Authorization: `Token ${ls.get('token')}`,\r\n      },\r\n    };\r\n\r\n    axios\r\n      .get(\r\n        `https://abdulrashidalaskar.pythonanywhere.com/search?searchQuery=${searchedQuery}`,\r\n        config\r\n      )\r\n      .then((response) => {\r\n        setSearchSelectorData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const updateMedicineData = (values) => {\r\n    let config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Token ${ls.get('token')}`,\r\n      },\r\n    };\r\n\r\n    axios\r\n      .patch(\r\n        `https://abdulrashidalaskar.pythonanywhere.com/api/medicine/${medId}/`,\r\n        values,\r\n        config\r\n      )\r\n      .then((response) => {\r\n        toast.success(\"Medicine updated successfully\");\r\n      })\r\n      .catch((error) => {\r\n        toast.error(error.message || \"Something went wrong!\");\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n\r\n      <Container >\r\n        <Row>\r\n          <Col>\r\n            <BootstrapForm\r\n              style={{ display: \"flex\" }}\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n              }}\r\n            >\r\n              <div style={{width:\"100%\"}}>\r\n                <div style={{display:\"flex\"}}>\r\n                  <BootstrapForm.Control\r\n                    placeholder=\"Search..\"\r\n                    type=\"text\"\r\n                    name=\"searchbox\"\r\n                    value={searchedQuery}\r\n                    className=\"header-form-control\"\r\n                    onChange={(e) => {\r\n                      setSearchedQuery(e.target.value);\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    type=\"submit\"\r\n                    disabled={!searchedQuery}\r\n                    style={{\r\n                      border: \"none\",\r\n                      borderTopLeftRadius: 0,\r\n                      borderBottomLeftRadius: 0,\r\n                      backgroundColor: \"#28b8b0\",\r\n                    }}\r\n                    onClick={() => {\r\n                      searchMedicine();\r\n                    }}\r\n                  >\r\n                    <Search size={25} />\r\n                  </Button>\r\n              </div>\r\n              {searchSelectorData && searchSelectorData.length && (\r\n                <div className=\"search-selector-wrapper\" >\r\n                  {searchSelectorData &&\r\n                    searchSelectorData.length &&\r\n                    searchSelectorData.map((item) => (\r\n                      <Row>\r\n                        <Col md={12}>\r\n                          <div\r\n                            onClick={() => {\r\n                              setMed(item.name);\r\n                              setMedId(item.id)\r\n                            }}\r\n                            className=\"header-form-control form-control\"\r\n                          >\r\n                            {item.name}\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                    ))}\r\n                    \r\n                </div>\r\n                \r\n              )}\r\n              </div>\r\n              \r\n            </BootstrapForm>\r\n          </Col>\r\n          \r\n        </Row>\r\n        \r\n      </Container>\r\n      <br />\r\n      <Formik\r\n        validationSchema={validate}\r\n        initialValues={{\r\n          in_stock_total: \"\",\r\n          free_strip:\"\"\r\n        }}\r\n        onSubmit={(values) => {\r\n          console.log(values);\r\n          updateMedicineData(values)\r\n        }}\r\n      >\r\n        {(formik) => (\r\n          <div>\r\n            <Form>\r\n              <Container>\r\n                <Row>\r\n                  <Col md={4}>\r\n                    <TextField label=\"Medicine Name\" value={med}  name=\"name\" type=\"text\" />\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      name=\"in_stock_total\"\r\n                      label=\"In Stock Total\"\r\n                    />\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      name=\"free_strip\"\r\n                      label=\"Free strip\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <div className=\"d-grid gap-2\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      style={{\r\n                        border: \"none\",\r\n                        backgroundColor: \"#28b8b0\",\r\n                      }}\r\n                      disabled={!(formik.isValid && formik.dirty)}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                    <Button type=\"submit\" variant=\"outline-secondary\">\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </Row>\r\n              </Container>\r\n            </Form>\r\n          </div>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateMedicineForm;\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\screens\\Medicine\\AddMedicineForm.js",["143"],"import React from \"react\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport TextField from \"../../components/TextField/TextField\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form } from \"formik\";\r\nimport axios from \"axios\";\r\nimport { AUTH_TOKEN } from \"../../localStorage\";\r\nimport { toast } from \"../../components/Toast/Toast\";\r\nimport { instanceShop } from \"../../features/shop/shopSlice\";\r\nimport {useSelector} from 'react-redux'\r\nimport ls from  'local-storage'\r\nconst AddMedicineForm = () => {\r\n  const shop_id  = useSelector(instanceShop)\r\n  const submitForm = async (payload) => {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Token ${ls.get('token')}`,\r\n      },\r\n    };\r\n\r\n    await axios\r\n      .post(\r\n        \"https://abdulrashidalaskar.pythonanywhere.com/api/medicine/\",\r\n        payload,\r\n        config\r\n      )\r\n      .then((response) => {\r\n        toast.success(\"Medicine added successfully\");\r\n      })\r\n      .catch((error) => {\r\n        toast.error(error.message || \"Something went wrong!\");\r\n      });\r\n  };\r\n\r\n  const validate = Yup.object({\r\n    name: Yup.string().required(\"Required*\"),\r\n    company: Yup.string().required(\"Required*\"),\r\n    medical_typ: Yup.string().required(\"Required*\"),\r\n    // in_single_stock_total: Yup.number().required(\"Required*\"),\r\n    manufacture: Yup.string().required(\"Required*\"),\r\n    qty_in_strip: Yup.number().required(\"Required*\").positive().integer(),\r\n    in_stock_total: Yup.number().required(\"Required*\").positive().integer(),\r\n    free_strip: Yup.number().required(\"Required*\").positive().integer(),\r\n    description: Yup.string().required(\"Required*\"),\r\n    shelf_no: Yup.string().required(\"Required*\"),\r\n    batch_no: Yup.string().required(\"Required*\"),\r\n    s_gst: Yup.string().required(\"Required*\"),\r\n    c_gst: Yup.string().required(\"Required*\"),\r\n    sell_price: Yup.number().required(\"Required*\").positive().integer(),\r\n    buy_price: Yup.number().required(\"Required*\").positive().integer(),\r\n    medicine_tags: Yup.string().required(\"Required*\"),\r\n    expire_date: Yup.date().required(\"Required*\"),\r\n    mfg_date: Yup.date().required(\"Required*\"),\r\n    category: Yup.string().required(\"Required*\"),\r\n    unit_of_measure: Yup.string().required(\"Required*\"),\r\n    // schedule_drug: Yup.string().required(\"Required*\"),\r\n    buyer: Yup.string().required(\"Required*\"),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={validate}\r\n      initialValues={{\r\n        name: \"\",\r\n        company: shop_id,\r\n        manufacture: \"\",\r\n        qty_in_strip: \"\",\r\n        in_stock_total: \"\",\r\n        free_strip: \"\",\r\n        description: \"\",\r\n        shelf_no: \"\",\r\n        batch_no: \"\",\r\n        s_gst: \"\",\r\n        c_gst: \"\",\r\n        sell_price: \"\",\r\n        buy_price: \"\",\r\n        medicine_tags: \"\",\r\n        expire_date: \"\",\r\n        mfg_date: \"\",\r\n        category: \"\",\r\n        unit_of_measure: \"\",\r\n        buyer: \"\",\r\n      }}\r\n      onSubmit={(values) => {\r\n        submitForm(values);\r\n      }}\r\n    >\r\n      {(formik) => (\r\n        <div>\r\n          <Form>\r\n            <Container>\r\n              <Row>\r\n                <Col md={6}>\r\n                  <TextField label=\"Medicine Name\" name=\"name\" type=\"text\" />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField label=\"Company Name\" name=\"company\" value={shop_id}  disabled type=\"text\" />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    name=\"manufacture\"\r\n                    label=\"Manufacturer Name\"\r\n                  />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"number\"\r\n                    name=\"qty_in_strip\"\r\n                    label=\"Quantity In Strip\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Col md={6}>\r\n                  <TextField type=\"text\" name=\"category\" label=\"Category\" />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField type=\"text\" name=\"buyer\" label=\"Buyer\" />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    name=\"medical_typ\"\r\n                    label=\"Medical Type\"\r\n                  />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"number\"\r\n                    name=\"in_stock_total\"\r\n                    label=\"In Stock Total\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n               \r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"number\"\r\n                    name=\"free_strip\"\r\n                    label=\"Free Strip\"\r\n                  />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                \r\n                <Col md={6}>\r\n                  <TextField type=\"text\" name=\"shelf_no\" label=\"Shelf Number\" />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField type=\"text\" name=\"batch_no\" label=\"Batch Number\" />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                \r\n                <Col md={6}>\r\n                  <TextField type=\"text\" name=\"s_gst\" label=\"SGST\" />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField type=\"text\" name=\"c_gst\" label=\"CGST\" />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                \r\n                <Col md={6}>\r\n                  <TextField type=\"number\" name=\"sell_price\" label=\"Sell Price\" />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField type=\"number\" name=\"buy_price\" label=\"Buy Price\" />\r\n                </Col>\r\n              </Row>\r\n              \r\n              <Row>\r\n                \r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    name=\"medicine_tags\"\r\n                    label=\"Medicine Tags\"\r\n                  />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    name=\"unit_of_measure\"\r\n                    label=\"Unit of Measure\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n \r\n              <Row>\r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"date\"\r\n                    name=\"expire_date\"\r\n                    label=\"Expiry Date\"\r\n                  />\r\n                </Col>\r\n                <Col md={6}>\r\n                  <TextField\r\n                    type=\"date\"\r\n                    name=\"mfg_date\"\r\n                    label=\"Manufacturing Date\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <div className=\"d-grid gap-2\">\r\n                  <Button\r\n                    type=\"submit\"\r\n                    style={{\r\n                      border: \"none\",\r\n                      backgroundColor: \"#28b8b0\",\r\n                    }}\r\n                    disabled={!(formik.isValid && formik.dirty)}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                  <Button type=\"submit\" variant=\"outline-secondary\">\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </Row>\r\n            </Container>\r\n          </Form>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddMedicineForm;\r\n","C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\Header\\Header.js",["144","145"],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\EmptyState\\EmptyState.js",["146","147"],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\common\\invoice.js",[],"C:\\Users\\AbdulRashid\\Desktop\\pesto\\Project\\ninja\\n7-medicalinventory-fullstack-eta-1-7\\src\\components\\TextField\\TextField.js",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":8,"column":3,"nodeType":"154","messageId":"155","endLine":8,"endColumn":19},{"ruleId":"152","severity":1,"message":"156","line":13,"column":3,"nodeType":"154","messageId":"155","endLine":13,"endColumn":13},{"ruleId":"152","severity":1,"message":"157","line":41,"column":9,"nodeType":"154","messageId":"155","endLine":41,"endColumn":16},{"ruleId":"152","severity":1,"message":"158","line":43,"column":9,"nodeType":"154","messageId":"155","endLine":43,"endColumn":16},{"ruleId":"159","severity":1,"message":"160","line":72,"column":6,"nodeType":"161","endLine":72,"endColumn":8,"suggestions":"162"},{"ruleId":"152","severity":1,"message":"163","line":2,"column":22,"nodeType":"154","messageId":"155","endLine":2,"endColumn":33},{"ruleId":"159","severity":1,"message":"164","line":13,"column":8,"nodeType":"161","endLine":13,"endColumn":10,"suggestions":"165"},{"ruleId":"166","severity":1,"message":"167","line":18,"column":17,"nodeType":"168","endLine":18,"endColumn":58},{"ruleId":"152","severity":1,"message":"169","line":5,"column":10,"nodeType":"154","messageId":"155","endLine":5,"endColumn":16},{"ruleId":"152","severity":1,"message":"163","line":2,"column":23,"nodeType":"154","messageId":"155","endLine":2,"endColumn":34},{"ruleId":"159","severity":1,"message":"170","line":99,"column":6,"nodeType":"161","endLine":99,"endColumn":8,"suggestions":"171"},{"ruleId":"159","severity":1,"message":"172","line":118,"column":6,"nodeType":"161","endLine":118,"endColumn":14,"suggestions":"173"},{"ruleId":"159","severity":1,"message":"172","line":148,"column":6,"nodeType":"161","endLine":148,"endColumn":15,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":169,"column":25,"nodeType":"177","messageId":"178","endLine":169,"endColumn":27},{"ruleId":"152","severity":1,"message":"179","line":7,"column":10,"nodeType":"154","messageId":"155","endLine":7,"endColumn":20},{"ruleId":"152","severity":1,"message":"158","line":18,"column":9,"nodeType":"154","messageId":"155","endLine":18,"endColumn":16},{"ruleId":"180","severity":1,"message":"181","line":28,"column":25,"nodeType":"182","messageId":"183","endLine":28,"endColumn":27},{"ruleId":"152","severity":1,"message":"184","line":6,"column":9,"nodeType":"154","messageId":"155","endLine":6,"endColumn":20},{"ruleId":"159","severity":1,"message":"185","line":22,"column":8,"nodeType":"161","endLine":22,"endColumn":10,"suggestions":"186"},{"ruleId":"152","severity":1,"message":"187","line":41,"column":11,"nodeType":"154","messageId":"155","endLine":41,"endColumn":22},{"ruleId":"188","severity":1,"message":"189","line":41,"column":33,"nodeType":"190","messageId":"191","endLine":41,"endColumn":34,"suggestions":"192"},{"ruleId":"152","severity":1,"message":"179","line":3,"column":10,"nodeType":"154","messageId":"155","endLine":3,"endColumn":20},{"ruleId":"152","severity":1,"message":"193","line":3,"column":22,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"194","line":13,"column":8,"nodeType":"154","messageId":"155","endLine":13,"endColumn":14},{"ruleId":"152","severity":1,"message":"179","line":7,"column":10,"nodeType":"154","messageId":"155","endLine":7,"endColumn":20},{"ruleId":"152","severity":1,"message":"195","line":11,"column":35,"nodeType":"154","messageId":"155","endLine":11,"endColumn":44},{"ruleId":"159","severity":1,"message":"196","line":33,"column":6,"nodeType":"161","endLine":33,"endColumn":8,"suggestions":"197"},{"ruleId":"152","severity":1,"message":"198","line":3,"column":10,"nodeType":"154","messageId":"155","endLine":3,"endColumn":16},{"ruleId":"152","severity":1,"message":"158","line":8,"column":9,"nodeType":"154","messageId":"155","endLine":8,"endColumn":16},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"no-unused-vars","'createTokenAsync' is defined but never used.","Identifier","unusedVar","'selectUser' is defined but never used.","'isAdmin' is assigned a value but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkTokenValidation'. Either include it or remove the dependency array.","ArrayExpression",["201"],"'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["202"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'logout' is defined but never used.","React Hook useEffect has missing dependencies: 'filters' and 'location.search'. Either include them or remove the dependency array.",["203"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'location.search'. Either include them or remove the dependency array.",["204"],["205"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'AUTH_TOKEN' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'isAdmin'. Either include them or remove the dependency array.",["206"],"'phoneRegExp' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\d.","Literal","unnecessaryEscape",["207","208"],"'removeToken' is defined but never used.","'Header' is defined but never used.","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'location.search'. Either include them or remove the dependency array.",["209"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"messageId":"222","fix":"223","desc":"224"},{"messageId":"225","fix":"226","desc":"227"},{"desc":"228","fix":"229"},"Update the dependencies array to be: [checkTokenValidation]",{"range":"230","text":"231"},"Update the dependencies array to be: [dispatch]",{"range":"232","text":"233"},"Update the dependencies array to be: [filters, location.search]",{"range":"234","text":"235"},"Update the dependencies array to be: [dispatch, history, location.search, sortBy]",{"range":"236","text":"237"},"Update the dependencies array to be: [dispatch, filters, history, location.search]",{"range":"238","text":"239"},"Update the dependencies array to be: [history, isAdmin]",{"range":"240","text":"241"},"removeEscape",{"range":"242","text":"243"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"244","text":"245"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [dispatch, location.search]",{"range":"246","text":"247"},[2267,2269],"[checkTokenValidation]",[365,367],"[dispatch]",[3059,3061],"[filters, location.search]",[3602,3610],"[dispatch, history, location.search, sortBy]",[4590,4599],"[dispatch, filters, history, location.search]",[847,849],"[history, isAdmin]",[1478,1479],"",[1478,1478],"\\",[1190,1192],"[dispatch, location.search]"]