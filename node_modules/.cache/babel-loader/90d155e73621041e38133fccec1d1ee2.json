{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"../../axios\";\nimport { setAuthToken } from \"../../localStorage\";\nimport { toast } from \"../../components/Toast/Toast\";\nconst initialState = {\n  value: 0,\n  loggedIn: false,\n  status: \"idle\",\n  isAdmin: false,\n  error: \"\",\n  employeeId: null,\n  companyId: null\n};\nexport const createTokenAsync = createAsyncThunk(\"user/fetchToken\", async (data, thunkAPI) => {\n  try {\n    //const response = await fetch(`url`); //where you want to fetch data\n    //Your Axios code part.\n    const response = await axios.post(\"/api-token-auth/\", data);\n    setAuthToken(\"token\", response.data.token);\n    return response.data.token;\n  } catch (error) {\n    toast.error(\"Authentication denied\");\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const loginSlice = createSlice({\n  name: \"login\",\n  initialState,\n  reducers: {\n    logout: state => {\n      state.loggedIn = false;\n      state.isAdmin = false;\n      state.employeeId = null;\n      state.companyId = null;\n    },\n    log: (state, action) => {\n      state.loggedIn = true;\n      state.isAdmin = action.payload.admin;\n      state.employeeId = action.payload.employee;\n      state.companyId = action.payload.company;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createTokenAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(createTokenAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      console.log(action.payload);\n      state.value = action.payload;\n      state.error = \"\";\n    }).addCase(createTokenAsync.rejected, (state, action) => {\n      state.status = \"error\";\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  log,\n  logout\n} = loginSlice.actions;\nexport const selectUser = state => state;\nexport const selectLoggedIn = state => state.login.loggedIn;\nexport const selectIsAdmin = state => state.login.isAdmin;\nexport default loginSlice.reducer;","map":{"version":3,"sources":["C:/Users/AbdulRashid/Desktop/pesto/Project/ninja/n7-medicalinventory-fullstack-eta-1-7/src/features/login/loginSlice.js"],"names":["createAsyncThunk","createSlice","axios","setAuthToken","toast","initialState","value","loggedIn","status","isAdmin","error","employeeId","companyId","createTokenAsync","data","thunkAPI","response","post","token","rejectWithValue","message","loginSlice","name","reducers","logout","state","log","action","payload","admin","employee","company","extraReducers","builder","addCase","pending","fulfilled","console","rejected","actions","selectUser","selectLoggedIn","login","selectIsAdmin","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,KAAT,QAAsB,8BAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,QAAQ,EAAE,KAFS;AAGnBC,EAAAA,MAAM,EAAE,MAHW;AAInBC,EAAAA,OAAO,EAAE,KAJU;AAKnBC,EAAAA,KAAK,EAAE,EALY;AAMnBC,EAAAA,UAAU,EAAC,IANQ;AAOnBC,EAAAA,SAAS,EAAC;AAPS,CAArB;AAUA,OAAO,MAAMC,gBAAgB,GAAGb,gBAAgB,CAC9C,iBAD8C,EAE9C,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACxB,MAAI;AACF;AACA;AACA,UAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,kBAAX,EAA+BH,IAA/B,CAAvB;AACAX,IAAAA,YAAY,CAAC,OAAD,EAAUa,QAAQ,CAACF,IAAT,CAAcI,KAAxB,CAAZ;AACA,WAAOF,QAAQ,CAACF,IAAT,CAAcI,KAArB;AACD,GAND,CAME,OAAOR,KAAP,EAAc;AACdN,IAAAA,KAAK,CAACM,KAAN,CAAY,uBAAZ;AACA,WAAOK,QAAQ,CAACI,eAAT,CAAyBT,KAAK,CAACU,OAA/B,CAAP;AACD;AACF,CAb6C,CAAzC;AAgBP,OAAO,MAAMC,UAAU,GAAGpB,WAAW,CAAC;AACpCqB,EAAAA,IAAI,EAAE,OAD8B;AAEpCjB,EAAAA,YAFoC;AAGpCkB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAEC,KAAD,IAAW;AAChBA,MAAAA,KAAK,CAAClB,QAAN,GAAiB,KAAjB;AACAkB,MAAAA,KAAK,CAAChB,OAAN,GAAgB,KAAhB;AACAgB,MAAAA,KAAK,CAACd,UAAN,GAAkB,IAAlB;AACAc,MAAAA,KAAK,CAACb,SAAN,GAAkB,IAAlB;AAED,KAPO;AAQRc,IAAAA,GAAG,EAAE,CAACD,KAAD,EAAOE,MAAP,KAAkB;AACrBF,MAAAA,KAAK,CAAClB,QAAN,GAAiB,IAAjB;AACAkB,MAAAA,KAAK,CAAChB,OAAN,GAAgBkB,MAAM,CAACC,OAAP,CAAeC,KAA/B;AACAJ,MAAAA,KAAK,CAACd,UAAN,GAAmBgB,MAAM,CAACC,OAAP,CAAeE,QAAlC;AACAL,MAAAA,KAAK,CAACb,SAAN,GAAkBe,MAAM,CAACC,OAAP,CAAeG,OAAjC;AACD;AAbO,GAH0B;AAkBpCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWrB,gBAAgB,CAACsB,OAD5B,EACsCV,KAAD,IAAW;AAC5CA,MAAAA,KAAK,CAACjB,MAAN,GAAe,SAAf;AACD,KAHH,EAIG0B,OAJH,CAIWrB,gBAAgB,CAACuB,SAJ5B,EAIuC,CAACX,KAAD,EAAQE,MAAR,KAAmB;AACtDF,MAAAA,KAAK,CAACjB,MAAN,GAAe,MAAf;AACA6B,MAAAA,OAAO,CAACX,GAAR,CAAYC,MAAM,CAACC,OAAnB;AACAH,MAAAA,KAAK,CAACnB,KAAN,GAAcqB,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACf,KAAN,GAAc,EAAd;AACD,KATH,EAUGwB,OAVH,CAUWrB,gBAAgB,CAACyB,QAV5B,EAUsC,CAACb,KAAD,EAAQE,MAAR,KAAmB;AACrDF,MAAAA,KAAK,CAACjB,MAAN,GAAe,OAAf;AACAiB,MAAAA,KAAK,CAACf,KAAN,GAAciB,MAAM,CAACC,OAArB;AACD,KAbH;AAcD;AAjCmC,CAAD,CAA9B;AAoCP,OAAO,MAAM;AAAEF,EAAAA,GAAF;AAAMF,EAAAA;AAAN,IAAiBH,UAAU,CAACkB,OAAlC;AACP,OAAO,MAAMC,UAAU,GAAIf,KAAD,IAAWA,KAA9B;AACP,OAAO,MAAMgB,cAAc,GAAIhB,KAAD,IAAWA,KAAK,CAACiB,KAAN,CAAYnC,QAA9C;AACP,OAAO,MAAMoC,aAAa,GAAIlB,KAAD,IAAWA,KAAK,CAACiB,KAAN,CAAYjC,OAA7C;AACP,eAAeY,UAAU,CAACuB,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"../../axios\";\r\nimport { setAuthToken } from \"../../localStorage\";\r\nimport { toast } from \"../../components/Toast/Toast\";\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  loggedIn: false,\r\n  status: \"idle\",\r\n  isAdmin: false,\r\n  error: \"\",\r\n  employeeId:null,\r\n  companyId:null\r\n};\r\n\r\nexport const createTokenAsync = createAsyncThunk(\r\n  \"user/fetchToken\",\r\n  async (data, thunkAPI) => {\r\n    try {\r\n      //const response = await fetch(`url`); //where you want to fetch data\r\n      //Your Axios code part.\r\n      const response = await axios.post(\"/api-token-auth/\", data);\r\n      setAuthToken(\"token\", response.data.token);\r\n      return response.data.token;\r\n    } catch (error) {\r\n      toast.error(\"Authentication denied\");\r\n      return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const loginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState,\r\n  reducers: {\r\n    logout:(state) => {\r\n      state.loggedIn = false;\r\n      state.isAdmin = false;\r\n      state.employeeId= null\r\n      state.companyId = null\r\n\r\n    },\r\n    log: (state,action) => {\r\n      state.loggedIn = true;\r\n      state.isAdmin = action.payload.admin;\r\n      state.employeeId = action.payload.employee;\r\n      state.companyId = action.payload.company;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createTokenAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(createTokenAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        console.log(action.payload);\r\n        state.value = action.payload;\r\n        state.error = \"\";\r\n      })\r\n      .addCase(createTokenAsync.rejected, (state, action) => {\r\n        state.status = \"error\";\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { log,logout } = loginSlice.actions;\r\nexport const selectUser = (state) => state;\r\nexport const selectLoggedIn = (state) => state.login.loggedIn;\r\nexport const selectIsAdmin = (state) => state.login.isAdmin;\r\nexport default loginSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}