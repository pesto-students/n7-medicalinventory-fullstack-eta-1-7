{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"../../axios\";\nimport { AUTH_TOKEN } from \"../../localStorage\";\nimport ls from 'local-storage';\nconst initialState = {\n  status: \"idle\",\n  error: \"\",\n  searchedData: []\n};\nexport const getSearchedData = createAsyncThunk(\"searchSlice/getSearchedData\", async (searchParams, thunkAPI) => {\n  let config = {\n    headers: {\n      Authorization: `Token ${ls.get('token')}`\n    }\n  };\n\n  try {\n    const response = await axios.get(`/search?${searchParams}`, config);\n    return response.data;\n  } catch (error) {\n    return error.message; // return thunkAPI.rejectWithValue(error.message);\n  }\n});\nconst searchSlice = createSlice({\n  name: \"searchSlice\",\n  initialState: initialState,\n  extraReducers: {\n    [getSearchedData.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getSearchedData.fulfilled]: (state, {\n      payload\n    }) => {\n      state.searchedData = payload;\n      state.status = \"success\";\n    },\n    [getSearchedData.rejected]: (state, {\n      payload\n    }) => {\n      state.error = payload;\n      state.status = \"failed\";\n    }\n  }\n});\nexport default searchSlice.reducer;","map":{"version":3,"sources":["C:/Users/AbdulRashid/Desktop/pesto/Project/ninja/n7-medicalinventory-fullstack-eta-1-7/src/features/search/searchSlice.js"],"names":["createAsyncThunk","createSlice","axios","AUTH_TOKEN","ls","initialState","status","error","searchedData","getSearchedData","searchParams","thunkAPI","config","headers","Authorization","get","response","data","message","searchSlice","name","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,EAAP,MAAe,eAAf;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MADW;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,YAAY,EAAE;AAHK,CAArB;AAMA,OAAO,MAAMC,eAAe,GAAGT,gBAAgB,CAC7C,6BAD6C,EAE7C,OAAOU,YAAP,EAAqBC,QAArB,KAAkC;AAChC,MAAIC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,SAAQV,EAAE,CAACW,GAAH,CAAO,OAAP,CAAgB;AADjC;AADE,GAAb;;AAMA,MAAI;AAEF,UAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACa,GAAN,CAAW,WAAUL,YAAa,EAAlC,EAAqCE,MAArC,CAAvB;AACA,WAAOI,QAAQ,CAACC,IAAhB;AACD,GAJD,CAIE,OAAOV,KAAP,EAAc;AACd,WAAOA,KAAK,CAACW,OAAb,CADc,CAEd;AACD;AACF,CAjB4C,CAAxC;AAoBP,MAAMC,WAAW,GAAGlB,WAAW,CAAC;AAC9BmB,EAAAA,IAAI,EAAE,aADwB;AAE9Bf,EAAAA,YAAY,EAAEA,YAFgB;AAG9BgB,EAAAA,aAAa,EAAE;AACb,KAACZ,eAAe,CAACa,OAAjB,GAA2B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACjB,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACG,eAAe,CAACgB,SAAjB,GAA6B,CAACF,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,KAAwB;AACnDH,MAAAA,KAAK,CAACf,YAAN,GAAqBkB,OAArB;AACAH,MAAAA,KAAK,CAACjB,MAAN,GAAe,SAAf;AACD,KAPY;AAQb,KAACG,eAAe,CAACkB,QAAjB,GAA4B,CAACJ,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,KAAwB;AAClDH,MAAAA,KAAK,CAAChB,KAAN,GAAcmB,OAAd;AACAH,MAAAA,KAAK,CAACjB,MAAN,GAAe,QAAf;AACD;AAXY;AAHe,CAAD,CAA/B;AAkBA,eAAea,WAAW,CAACS,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"../../axios\";\r\nimport { AUTH_TOKEN } from \"../../localStorage\";\r\nimport ls from 'local-storage'\r\nconst initialState = {\r\n  status: \"idle\",\r\n  error: \"\",\r\n  searchedData: [],\r\n};\r\n\r\nexport const getSearchedData = createAsyncThunk(\r\n  \"searchSlice/getSearchedData\",\r\n  async (searchParams, thunkAPI) => {\r\n    let config = {\r\n      headers: {\r\n        Authorization: `Token ${ls.get('token')}`,\r\n      },\r\n    };\r\n\r\n    try {\r\n\r\n      const response = await axios.get(`/search?${searchParams}`, config);\r\n      return response.data;\r\n    } catch (error) {\r\n      return error.message;\r\n      // return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst searchSlice = createSlice({\r\n  name: \"searchSlice\",\r\n  initialState: initialState,\r\n  extraReducers: {\r\n    [getSearchedData.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getSearchedData.fulfilled]: (state, { payload }) => {\r\n      state.searchedData = payload;\r\n      state.status = \"success\";\r\n    },\r\n    [getSearchedData.rejected]: (state, { payload }) => {\r\n      state.error = payload;\r\n      state.status = \"failed\";\r\n    },\r\n  },\r\n});\r\n\r\nexport default searchSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}